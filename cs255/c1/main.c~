
#define EXTERN

#include <stdio.h>
#include <stdlib.h>
#include "header.h"
int i;
int j;

void clearAll(){
	int i;	
	for ( i=0;i<MAX;i++){
		prime[i]=0;
	}	
}

int getin(int bitin){
	return bitin / 32;
}

int getdi(int bitin){
	return bitin % 32;
}

void setBit(int A[], int n){
	A[getin(n)] |= (1<<getdi(n));

}

int isPrime(int A[],int n){
	return !(A[getin(n)] &= (1<<getdi(n)));
}


void sieveOfE(int N){

	clearAll;

	setBit(prime,0);
	setBit(prime,1);
		
	for (i=2;i<=N;i++){
		if (isPrime(prime,i)) {
			for (j=i; j<=N;j+=i){
				setBit(prime,j);

			}
		}
	}
}

int countPrimes(int N){


	int counter = 0;
	for (i=1;i<=N;i++){
		counter += isPrime(prime,i)? 1 : 0 ;
	}
	return counter;

}

void printPrimes (int k1, int k2, int N){

	int counter = 0;
	for (i=1;i<=N;i++){
		counter += isPrime(prime,i)? 1 : 0 ;
		
		if (counter>=k1 && counter<=k2){
			printf(stderr, "%d \n", prime[i]);
		}

	}


}

int main(int argc, char *argv[])
{
   int N, numOfPrimes;

   if ( argc == 1 )
   {
      fprintf(stderr, "Usage: %s  N\n", argv[0]);
      fprintf(stderr, " - you must specify the max. range of numbers to test (N)\n");
      fprintf(stderr, " - Example: %s 1000000\n", argv[0]);
      exit(1);
   }

	

   N = atoi( argv[1] );			// Convert argv[1] to integer

	

   sieveOfE( N );			// Call sieveOfE()

   numOfPrimes = countPrimes( N );	// Find # primes

   printf("Number of primes found = %d\n", numOfPrimes );

   /* -------------------------------------------------------------------
      Print the last 10 primes found
      ------------------------------------------------------------------- */
   if ( N > 30 )
      printPrimes( numOfPrimes-10, numOfPrimes, N );
}
